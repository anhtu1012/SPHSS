/* eslint-disable @typescript-eslint/no-explicit-any */
import { DatePicker, Divider } from "antd";
import dayjs from "dayjs";
import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { useParams } from "react-router-dom";
import { toast } from "react-toastify";
import AppointmentForm from "../../../components/AppointmentForm";
import { selectUser } from "../../../redux/features/userSlice";
import { getUserId } from "../../../services/admin/api";
import {
  createAppointment,
  getTimeSlotByDoctorId,
} from "../../../services/student/PsychologistDetail/api";
import "./index.scss";
import Time from "./Time";
import SuccessModal from "./SuccessModal";

type TimeSlotType = {
  startTime: string;
  endTime: string;
  id: string;
};
type AppointmentDetailsType = {
  doctorName: string;
  startTime: string;
  endTime: string;
  date: string;
};

const PsychologistDetail = () => {
  const { id } = useParams();
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [selectedSlot, setSelectedSlot] = useState<TimeSlotType | null>(null);
  const [isAppointmentModalOpen, setIsAppointmentModalOpen] = useState(false);
  const [isConfirmationModalOpen, setIsConfirmationModalOpen] = useState(false);
  const [appointmentDetails, setAppointmentDetails] =
    useState<AppointmentDetailsType>();
  const [timeSlotList, setTimeSlotList] = useState<TimeSlotType[]>([]);
  const currentUser = useSelector(selectUser) as any;
  const [doctorInfo, setDoctorInfo] = useState<any>();
  useEffect(() => {
    setSelectedDate(new Date());
    const fetchDoctor = async () => {
      const response = await getUserId(id as string);
      setDoctorInfo(response.data.data as any);
    };
    fetchDoctor();
  }, []);

  const handleTimeSlotClick = (timeSlot: TimeSlotType) => {
    if (!selectedDate) {
      toast.warning("Vui l√≤ng ch·ªçn ng√†y t∆∞ v·∫•n tr∆∞·ªõc");
      return;
    }

    setSelectedSlot(timeSlot);
    setIsAppointmentModalOpen(true);
  };

  const handleAppointmentSubmit = async (values: any) => {
    const payload = {
      user_id: currentUser.id,
      appointments: [
        {
          time_slot_id: selectedSlot!.id,
          notes: values.notes,
          date: values.appointmentDate.toDate(),
        },
      ],
    };
    try {
      const res = await createAppointment(payload);
      if (res.data.data) {
        setIsAppointmentModalOpen(false);
        setSelectedSlot(null);
        setAppointmentDetails({
          doctorName: `${doctorInfo.firstName} ${doctorInfo.lastName}`,
          startTime: selectedSlot!.startTime,
          endTime: selectedSlot!.endTime,
          date: values.appointmentDate.format("DD/MM/YYYY"),
        });
        setIsConfirmationModalOpen(true);
      } else {
        toast.error("ƒê·∫∑t l·ªãch t∆∞ v·∫•n th·∫•t b·∫°i!");
      }
    } catch (error) {
      toast.error("ƒê·∫∑t l·ªãch t∆∞ v·∫•n th·∫•t b·∫°i!");
      console.error("Error creating appointment:", error);
    }
  };

  const handleGetTimeSlot = async () => {
    const res = await getTimeSlotByDoctorId(id as string);
    const resTimeSlotList = res.data.data.map((timeSlot: any) => ({
      startTime: timeSlot.start_time,
      endTime: timeSlot.end_time,
      id: parseFloat(timeSlot.time_slot_id),
    }));

    setTimeSlotList(resTimeSlotList);
  };

  const handleDateChange = (date: any) => {
    if (date && dayjs(date).isValid()) {
      setSelectedDate(date.toDate());
    }
  };

  const disabledDate = (current: any) => {
    return current && current < dayjs().startOf("day");
  };

  const currentDate = dayjs();
  const daysOfWeek = [
    "Ch·ªß nh·∫≠t",
    "Th·ª© hai",
    "Th·ª© ba",
    "Th·ª© t∆∞",
    "Th·ª© nƒÉm",
    "Th·ª© s√°u",
    "Th·ª© b·∫£y",
  ];

  useEffect(() => {
    handleGetTimeSlot();
  }, []);

  return (
    <div className="doctor__detail__container">
      <div className="doctor__detail__section1__container">
        {/* Basic info section - unchanged */}
        <div className="doctor__detail__section1__basic__info__container">
          <div className="doctor__detail__section1__basic__info__img__container">
            <img src={doctorInfo?.image} alt="doctor_img" />
          </div>
          <div className="doctor__detail__section1__basic__info">
            <div className="doctor__detail__section1__basic__info__name">
              {`${doctorInfo?.firstName} ${doctorInfo?.lastName}`}
            </div>
            <div className="doctor__detail__section1__basic__info__description">
              {doctorInfo?.description}
            </div>
            <div className="doctor__detail__section1__basic__info__location">
              üìçTh√†nh ph·ªë H·ªì Ch√≠ Minh
            </div>
          </div>
        </div>

        {/* Modified schedule section with pricing */}
        <div className="doctor__detail__schedule__wrapper">
          <div className="doctor__detail__section1__schedule__container">
            <div className="doctor__detail__section1__schedule__header">
              <div className="doctor__detail__section1__schedule__title">
                L·ªãch t∆∞ v·∫•n
              </div>
              <div className="doctor__detail__section1__schedule__price">
                <span className="price-tag">300.000ƒë</span>
                <span className="price-duration">/60 ph√∫t</span>
              </div>
            </div>

            <DatePicker
              onChange={handleDateChange}
              className="date-picker"
              defaultValue={currentDate}
              format={(value) =>
                `${daysOfWeek[dayjs(value).day()]} ${dayjs(value).format(
                  "DD/MM"
                )}`
              }
              disabledDate={disabledDate}
            />

            <div className="time-slots-container">
              <div className="time-slots-heading">Ch·ªçn gi·ªù t∆∞ v·∫•n:</div>
              <div className="doctor__detail__section1__schedule__option__list">
                {timeSlotList.map((timeSlot, index) => (
                  <Time
                    key={index}
                    {...timeSlot}
                    isSelected={selectedSlot?.id === timeSlot.id}
                    onClick={() => handleTimeSlotClick(timeSlot)}
                  />
                ))}
              </div>
            </div>
          </div>

          {/* New session info card */}
          <div className="session-info-card">
            <h3>Th√¥ng tin bu·ªïi t∆∞ v·∫•n</h3>
            <ul>
              <li>‚úì Th·ªùi l∆∞·ª£ng: 60 ph√∫t</li>
              <li>‚úì T∆∞ v·∫•n tr·ª±c tuy·∫øn qua video</li>
              <li>‚úì Chat v·ªõi b√°c sƒ© tr∆∞·ªõc bu·ªïi t∆∞ v·∫•n</li>
              <li>‚úì Nh·∫≠n t√†i li·ªáu h·ªó tr·ª£ sau bu·ªïi t∆∞ v·∫•n</li>
            </ul>
          </div>
        </div>
      </div>

      <Divider
        style={{
          borderColor: "#ec744a",
        }}
      />
      {/* doctor detail information*/}
      <div>
        <h2 className="doctor__detail__description__title">
          {`${doctorInfo?.firstName} ${doctorInfo?.lastName}`}
        </h2>
        <ul className="doctor__detail__description__info__list">
          <li>
            Nhi·ªÅu nƒÉm kinh nghi·ªám trong kh√°m v√† ƒëi·ªÅu tr·ªã c√°c b·ªánh l√Ω N·ªôi - Ngo·∫°i
            Th·∫ßn kinh
          </li>
          <li>
            Hi·ªán ƒëang c√¥ng t√°c t·∫°i B·ªánh vi·ªán Ch·ª£ R·∫´y v√† B·ªánh vi·ªán Nh√¢n d√¢n 115
          </li>
          <li>B√°c sƒ© nh·∫≠n kh√°m t·ª´ 10 tu·ªïi</li>
        </ul>

        <h2 className="doctor__detail__description__title">Kh√°m v√† ƒëi·ªÅu tr·ªã</h2>
        <h3 className="doctor__detail__description__title">
          Kh√°m v√† ƒëi·ªÅu tr·ªã c√°c r·ªëi lo·∫°n:
        </h3>
        <ul className="doctor__detail__description__info__list">
          <li>ƒêau n·ª≠a ƒë·∫ßu Th·∫ßn kinh</li>
          <li>R·ªëi lo·∫°n ti·ªÅn ƒë√¨nh</li>
          <li>Parkinson</li>
          <li>
            Tai bi·∫øn m·∫°ch m√°u n√£o ƒêau d√¢y th·∫ßn kinh s·ªë V Vi√™m ƒëa d√¢y th·∫ßn kinh
          </li>
          <li>
            Nh∆∞·ª£c c∆° Li·ªát m·∫∑t ƒêau d√¢y th·∫ßn kinh li√™n s∆∞·ªùn H·ªôi ch·ª©ng li·ªát n·ª≠a
            ng∆∞·ªùi
          </li>
          <li>H·ªôi ch·ª©ng m·∫•t tr√≠ nh·ªõ th∆∞·ªùng xuy√™n</li>
        </ul>
        <h3 className="doctor__detail__description__title">
          Ph·∫´u thu·∫≠t b·ªánh l√Ω ngo·∫°i bi√™n
        </h3>
        <ul className="doctor__detail__description__info__list">
          <li>M√°u t·ª• DMC (d∆∞·ªõi m√†ng c·ª©ng) m·∫°n t√≠nh v√† c√°c CTSN</li>
          <li>Gh√©p s·ªç t·ª± th√¢n, nh√¢n t·∫°o </li>
          <li>U da ƒë·∫ßu l√†nh t√≠nh</li>
          <li>U m√†ng n√£o b√°n c·∫ßu</li>
          <li>H·ªôi ch·ª©ng ·ªëng c·ªï tay</li>
          <li>TVƒêD th·∫Øt l∆∞ng</li>
        </ul>
        <h3 className="doctor__detail__description__title">
          X·∫° ph·∫´u Gamma Knife
        </h3>
        <ul className="doctor__detail__description__info__list">
          <li>
            D·ªã d·∫°ng m·∫°ch m√°u n√£o: AVM, Cavernoma, d√≤ DM m√†ng c·ª©ng xoang hang
          </li>
          <li>C√°c u n√£o l√†nh t√≠nh c√≤n nh·ªè &lt; 3 cm ho·∫∑c c√≤n l·∫°i sau m·ªï</li>
          <li>
            ƒêau th·∫ßn kinh s·ªë V t√°i ph√°t, th·∫•t b·∫°i sau ƒëi·ªÅu tr·ªã v·ªõi c√°c ph∆∞∆°ng
            ph√°p kh√°c hay ·ªü b·ªánh nh√¢n l√† ng∆∞·ªùi gi√† v√† c√≥ nhi·ªÅu b·ªánh n·ªôi khoa
            kh√°c ƒëi k√®m
          </li>
        </ul>
        <h3 className="doctor__detail__description__title">
          ƒêi·ªÅu tr·ªã c√°c b·ªánh l√Ω v·ªÅ N·ªôi Th·∫ßn kinh th√¥ng th∆∞·ªùng
        </h3>
        <ul className="doctor__detail__description__info__list">
          <li>M·∫•t ng·ªß</li>
          <li>ƒêau ƒë·∫ßu</li>
          <li>ƒêau l∆∞ng</li>
        </ul>
        <h3 className="doctor__detail__description__title">
          Qu√° tr√¨nh c√¥ng t√°c
        </h3>
        <ul className="doctor__detail__description__info__list">
          <li>
            Chuy√™n t∆∞ v·∫•n v√† tr·ª±c ti·∫øp ƒëi·ªÅu tr·ªã x·∫° ph·∫´u Gamma Knife v·ªÅ c√°c b·ªánh
            l√Ω trong n√£o (C√°c lo·∫°i u n√£o, d·ªã d·∫°ng m·∫°ch m√°u n√£o), ƒëau d√¢y th·∫ßn
            kinh s·ªë V t·∫°i B·ªánh vi·ªán Ch·ª£ R·∫´y v√† B·ªánh vi·ªán 115
          </li>
        </ul>
        <Divider
          style={{
            borderColor: "#ec744a",
            width: "99vw",
            marginLeft: "calc(-50vw + 50%)",
          }}
        />
      </div>
      {/* students feedback*/}
      <div className="doctor__detail__student__feedback__container">
        <div className="doctor__detail__student__feedback__title">
          Ph·∫£n h·ªìi c·ªßa h·ªçc sinh sau khi ƒë∆∞·ª£c t∆∞ v·∫•n
        </div>
        <ul className="doctor__detail__student__feedback__list">
          <li className="doctor__detail__student__feedback">
            <Divider
              style={{
                borderColor: "#ec744a",
              }}
            />
            <div className="doctor__detail__student__feedback__name">
              Nguy·ªÖn VƒÉn A
            </div>
            <div className="doctor__detail__student__feedback__content">
              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
              eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
              enim ad minim veniam, quis nostrud exercitation ullamco laboris
              nisi ut aliquip ex ea commodo consequat.
            </div>
          </li>
          <li className="doctor__detail__student__feedback">
            <Divider
              style={{
                borderColor: "#ec744a",
              }}
            />
            <div className="doctor__detail__student__feedback__name">
              Nguy·ªÖn VƒÉn B
            </div>
            <div className="doctor__detail__student__feedback__content">
              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
              eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
              enim ad minim veniam, quis nostrud exercitation ullamco laboris
              nisi ut aliquip ex ea commodo consequat.
            </div>
          </li>
        </ul>
      </div>
      {doctorInfo && (
        <AppointmentForm
          isOpen={isAppointmentModalOpen}
          onClose={() => {
            setIsAppointmentModalOpen(false);
            setSelectedSlot(null);
          }}
          doctor={{
            id: doctorInfo.id,
            name: doctorInfo.firstName + " " + doctorInfo.lastName,
          }}
          selectedSlot={selectedSlot}
          selectedDate={selectedDate}
          onSubmit={handleAppointmentSubmit}
          disabledDate={disabledDate}
        />
      )}
      {appointmentDetails && (
        <SuccessModal
          isOpen={isConfirmationModalOpen}
          onClose={() => setIsConfirmationModalOpen(false)}
          appointmentDetails={appointmentDetails}
        />
      )}
    </div>
  );
};

export default PsychologistDetail;
