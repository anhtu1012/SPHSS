import {
  Bar,
  BarChart,
  CartesianGrid,
  Rectangle,
  ResponsiveContainer,
  XAxis,
  YAxis,
} from "recharts";
import React, { useEffect, useRef, useState } from "react";
import html2canvas from "html2canvas";
import { Survey } from "../surveyHistory";
import { formatDate } from "../../../../utils/dateUtils";

interface PrintTemplateProps {
  survey?: Survey;
  onImageReady?: () => void;
}

const PrintTemplate = React.forwardRef<HTMLDivElement, PrintTemplateProps>(
  ({ survey, onImageReady }, ref) => {
    const chartRef = useRef<HTMLDivElement>(null);
    const [chartImage, setChartImage] = useState<string | null>(null);

    useEffect(() => {
      const captureChart = async () => {
        if (chartRef.current) {
          await new Promise((resolve) => setTimeout(resolve, 1000));

          const canvas = await html2canvas(chartRef.current, {
            backgroundColor: null,
            scale: 2,
            useCORS: true,
            foreignObjectRendering: true,
          });

          const imageData = canvas.toDataURL("image/png");
          console.log("Chart Image Data:", imageData); // üîç Debug: Xem ·∫£nh c√≥ ƒë∆∞·ª£c t·∫°o kh√¥ng
          setChartImage(imageData);
          if (onImageReady) {
            onImageReady();
          }
        }
      };

      captureChart();
    }, [survey, onImageReady]);


    if (!survey) {
      return (
        <div ref={ref} style={{ padding: "20px", fontSize: "10px" }}>
          <p>Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ in</p>
        </div>
      );
    }

    const chartData = [
      { name: "Tr·∫ßm c·∫£m", strength: getStrength(survey.depressionLevel) },
      { name: "Lo √¢u", strength: getStrength(survey.anxietyLevel) },
      { name: "CƒÉng th·∫≥ng", strength: getStrength(survey.stressLevel) },
    ];

    const formatYAxis = (value: number) => {
      if (value === 1) return "B√¨nh th∆∞·ªùng";
      if (value === 2) return "Nh·∫π";
      if (value === 3) return "Trung b√¨nh";
      if (value === 4) return "N·∫∑ng";
      if (value === 5) return "B√°o ƒë·ªông";
      return "";
    };

    return (
      <div ref={ref} style={{ padding: "20px", fontSize: "12px" }}>
        <h2 style={{ textAlign: "center", color: "#08509f" }}>
          {survey.survey.title}
        </h2>
        <p style={{ textAlign: "center" }}>
          Ng√†y: {formatDate(survey.survey.createdAt)}
        </p>

        <h3 style={{ textAlign: "center", color: "#08509f" }}>
          K·∫øt qu·∫£ kh·∫£o s√°t
        </h3>
        <div
          style={{
            textAlign: "center",
            fontSize: "20px",
            fontWeight: "bold",
            color: "#D32F2F",
          }}
        >
          {survey.depressionScore + survey.anxietyScore + survey.stressScore}
        </div>
        <p style={{ textAlign: "center", marginBottom: "10px" }}>
          ƒêi·ªÉm c·ªßa b·∫°n
        </p>

        <h3 style={{ textAlign: "center", color: "#08509f" }}>
          Chi ti·∫øt k·∫øt qu·∫£
        </h3>

        {/* N·∫øu ƒëang in, hi·ªÉn th·ªã ·∫£nh, n·∫øu kh√¥ng hi·ªÉn th·ªã bi·ªÉu ƒë·ªì */}
        {chartImage ? (
          <img src={chartImage} alt="Chart" style={{ width: "100%" }} />
        ) : (
          <div ref={chartRef}>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={chartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis
                  tickFormatter={formatYAxis}
                  domain={[0, 5]}
                  tickCount={6}
                />
                <Bar
                  dataKey="strength"
                  fill="#B3CDAD"
                  activeBar={<Rectangle fill="pink" stroke="blue" />}
                />
              </BarChart>
            </ResponsiveContainer>
          </div>
        )}

        <h3 style={{ textAlign: "center", color: "#08509f" }}>L·ªùi khuy√™n</h3>
        <p
          style={{
            textAlign: "center",
            fontWeight: "bold",
            color: "#D32F2F",
            marginBottom: "10px",
          }}
        >
          {getResultInterpretation(
            survey.depressionScore + survey.anxietyScore + survey.stressScore
          )}
        </p>
      </div>
    );
  }
);

PrintTemplate.displayName = "PrintTemplate";
export { PrintTemplate };

function getResultInterpretation(score: number) {
  if (score >= 0 && score <= 9) {
    return "B·∫°n ƒëang ·ªü m·ª©c b√¨nh th∆∞·ªùng. Ti·∫øp t·ª•c duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh.";
  } else if (score >= 10 && score <= 13) {
    return "B·∫°n c√≥ d·∫•u hi·ªáu nh·∫π c·ªßa v·∫•n ƒë·ªÅ t√¢m l√Ω. H√£y theo d√µi s·ª©c kh·ªèe tinh th·∫ßn.";
  } else if (score >= 14 && score <= 20) {
    return "B·∫°n ƒëang c√≥ d·∫•u hi·ªáu trung b√¨nh c·ªßa v·∫•n ƒë·ªÅ t√¢m l√Ω. N√™n t√¨m chuy√™n gia t∆∞ v·∫•n.";
  } else if (score >= 21 && score <= 27) {
    return "M·ª©c ƒë·ªô cao, n√™n t√¨m chuy√™n gia c√†ng s·ªõm c√†ng t·ªët.";
  }
  return "M·ª©c b√°o ƒë·ªông! C·∫ßn h·ªó tr·ª£ t√¢m l√Ω ngay l·∫≠p t·ª©c!";
}

function getStrength(level: any) {
  switch (level) {
    case "Normal":
      return 1;
    case "Mild":
      return 2;
    case "Moderate":
      return 3;
    case "Severe":
      return 4;
    case "Extremely Severe":
      return 5;
    default:
      return 0;
  }
}
